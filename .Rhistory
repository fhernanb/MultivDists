aux <- moments_estim_BP_Laksh(x_without_zeros)[3]
alpha_hat <- as.numeric(aux)
res <- c(l1_hat=l1_hat,
l2_hat=l2_hat,
alpha_hat=alpha_hat,
psi_hat=psi_hat)
return(round(res, digits=4))
}
x <- rZIBP_Laksh(n=5000, l1, l2, alpha, psi)
moments_estim_BP_Laksh(x)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
}
moments_estim_ZIBP_Laksh <- function(x) {
n <- nrow(x)
# zero positions
positions_zeros <- x[, 1] == 0 & x[, 2] == 0
n_zero <- sum(positions_zeros)
# subset with no zeros
x_without_zeros <- x[!positions_zeros, ]
# Correlation value without zeros
correlation <- cor(x_without_zeros)[1, 2]
# Estimating l1
l1_hat <- mean(x_without_zeros[, 1])
# Estimating l2
l2_hat <- mean(x_without_zeros[, 2])
psi_hat <- 1 - mean(x[, 1]) / l1_hat
# subset discounting excess zeros
small_zeros <- matrix(0, ncol=2, nrow=n_zero * psi_hat)
small_zeros <- as.data.frame(small_zeros)
colnames(small_zeros) <- colnames(x)
x_discounting_zeros <- rbind(x_without_zeros,
small_zeros)
print("La estimacion usando x_without_zeros:")
print(moments_estim_BP_Laksh(x_without_zeros))
# Auxiliar functio to check if alpha_hat is inside the interval
aux_check <- function(alpha_hat, l1_hat, l2_hat) {
min_alpha <- correct_alpha_BP_Laksh(l1=l1_hat, l2=l2_hat)$min_alpha
max_alpha <- correct_alpha_BP_Laksh(l1=l1_hat, l2=l2_hat)$max_alpha
alpha_hat <- ifelse(alpha_hat > max_alpha, max_alpha,
ifelse(alpha_hat < min_alpha, min_alpha, alpha_hat))
return(alpha_hat)
}
# For alpha
aux <- moments_estim_BP_Laksh(x_without_zeros)[3]
alpha_hat <- as.numeric(aux)
# Adjusting the alpha_hat's to ensure that it is inside in a correct interval
alpha_hat <- aux_check(alpha_hat=alpha_hat, l1_hat=l1_hat, l2_hat=l2_hat)
res <- c(l1_hat=l1_hat,
l2_hat=l2_hat,
alpha_hat=alpha_hat,
psi_hat=psi_hat)
return(round(res, digits=4))
}
x <- rZIBP_Laksh(n=5000, l1, l2, alpha, psi)
moments_estim_BP_Laksh(x)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
moments_estim_ZIBP_Laksh <- function(x) {
n <- nrow(x)
# zero positions
positions_zeros <- x[, 1] == 0 & x[, 2] == 0
n_zero <- sum(positions_zeros)
# subset with no zeros
x_without_zeros <- x[!positions_zeros, ]
# Correlation value without zeros
correlation <- cor(x_without_zeros)[1, 2]
# Estimating l1
l1_hat <- mean(x_without_zeros[, 1])
# Estimating l2
l2_hat <- mean(x_without_zeros[, 2])
psi_hat <- 1 - mean(x[, 1]) / l1_hat
# subset discounting excess zeros
small_zeros <- matrix(0, ncol=2, nrow=n_zero * psi_hat)
small_zeros <- as.data.frame(small_zeros)
colnames(small_zeros) <- colnames(x)
x_discounting_zeros <- rbind(x_without_zeros,
small_zeros)
# Auxiliar functio to check if alpha_hat is inside the interval
aux_check <- function(alpha_hat, l1_hat, l2_hat) {
min_alpha <- correct_alpha_BP_Laksh(l1=l1_hat, l2=l2_hat)$min_alpha
max_alpha <- correct_alpha_BP_Laksh(l1=l1_hat, l2=l2_hat)$max_alpha
alpha_hat <- ifelse(alpha_hat > max_alpha, max_alpha,
ifelse(alpha_hat < min_alpha, min_alpha, alpha_hat))
return(alpha_hat)
}
# For alpha
aux <- moments_estim_BP_Laksh(x_without_zeros)[3]
alpha_hat <- as.numeric(aux)
# Adjusting the alpha_hat's to ensure that it is inside in a correct interval
alpha_hat <- aux_check(alpha_hat=alpha_hat, l1_hat=l1_hat, l2_hat=l2_hat)
res <- c(l1_hat=l1_hat,
l2_hat=l2_hat,
alpha_hat=alpha_hat,
psi_hat=psi_hat)
return(round(res, digits=4))
}
x <- rZIBP_Laksh(n=5000, l1, l2, alpha, psi)
moments_estim_BP_Laksh(x)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
x <- rZIBP_Laksh(n=5000, l1, l2, alpha, psi)
moments_estim_BP_Laksh(x)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
l1 <- 5
l2 <- 3
correct_alpha_BP_Laksh(l1, l2)
alpha <- -1.2
psi <- 0.80
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_BP_Laksh(x)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_BP_Laksh(x)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
l1 <- 15
l2 <- 13
correct_alpha_BP_Laksh(l1, l2)
alpha <- -0.9
psi <- 0.80
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
psi <- 0.20
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
l1 <- 15
l2 <- 13
correct_alpha_BP_Laksh(l1, l2)
alpha <- 0.9
psi <- 0.20
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
l1 <- 15
l2 <- 13
correct_alpha_BP_Laksh(l1, l2)
alpha <- 0.9
psi <- 0.20
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
x <- rZIBP_Laksh(n=50000, l1, l2, alpha, psi)
moments_estim_ZIBP_Laksh(x)
cor(x)[2]
l1 <- 1
l2 <- 2
correct_alpha_BP_Laksh(l1=l1, l2=l2)
alpha <- -2.7
x <- rBP_Laksh(n=500, l1, l2, alpha)
moments_estim_BP_Laksh(x)
# The known parameters
l1 <- 5
l2 <- 3
correct_alpha_BP_Laksh(l1=l1, l2=l2)
# The known parameters
l1 <- 5
l2 <- 3
correct_alpha_BP_Laksh(l1=l1, l2=l2)
alpha <- -1.20
set.seed(12345)
x <- rZIBP_Laksh(n=500, l1=l1, l2=l2, alpha=alpha, psi=psi)
# To obtain reasonable values for alpha
theta <- as.numeric(moments_estim_ZIBP_Laksh(x))
theta
psi <- 0.20
set.seed(12345)
x <- rZIBP_Laksh(n=500, l1=l1, l2=l2, alpha=alpha, psi=psi)
# To obtain reasonable values for alpha
theta <- as.numeric(moments_estim_ZIBP_Laksh(x))
theta
# To create start parameters
min_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$min_alpha
max_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$max_alpha
start_param <- theta
names(start_param) <- c("l1_hat", "l2_hat", "alpha_hat", "psi_hat")
start_param
# Estimating parameters
res1 <- optim(fn = llZIBP_Laksh,
par = start_param,
lower = c(0.001, 0.001, min_alpha, 0.0001),
upper = c(  Inf,   Inf, max_alpha, 0.9999),
method = "L-BFGS-B",
control = list(maxit=100000, fnscale=-1),
x=x)
# Loglik function
llZIBP_Laksh <- function(param, x) {
l1    <- param[1]  # param: is the parameter vector
l2    <- param[2]
alpha <- param[3]
psi   <- param[4]
sum(dZIBP_Laksh(x=x, l1=l1, l2=l2,
alpha=alpha, psi=psi, log=TRUE))
}
# Estimating parameters
res1 <- optim(fn = llZIBP_Laksh,
par = start_param,
lower = c(0.001, 0.001, min_alpha, 0.0001),
upper = c(  Inf,   Inf, max_alpha, 0.9999),
method = "L-BFGS-B",
control = list(maxit=100000, fnscale=-1),
x=x)
res1
start_param
x <- rZIBP_Laksh(n=500, l1=l1, l2=l2, alpha=alpha, psi=psi)
# To obtain reasonable values for alpha
theta <- as.numeric(moments_estim_ZIBP_Laksh(x))
theta
# To create start parameters
min_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$min_alpha
max_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$max_alpha
start_param <- theta
names(start_param) <- c("l1_hat", "l2_hat", "alpha_hat", "psi_hat")
start_param
# Estimating parameters
res1 <- optim(fn = llZIBP_Laksh,
par = start_param,
lower = c(0.001, 0.001, min_alpha, 0.0001),
upper = c(  Inf,   Inf, max_alpha, 0.9999),
method = "L-BFGS-B",
control = list(maxit=100000, fnscale=-1),
x=x)
res1
x <- rZIBP_Laksh(n=500, l1=l1, l2=l2, alpha=alpha, psi=psi)
# To obtain reasonable values for alpha
theta <- as.numeric(moments_estim_ZIBP_Laksh(x))
theta
# To create start parameters
min_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$min_alpha
max_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$max_alpha
start_param <- theta
names(start_param) <- c("l1_hat", "l2_hat", "alpha_hat", "psi_hat")
start_param
# Estimating parameters
res1 <- optim(fn = llZIBP_Laksh,
par = start_param,
lower = c(0.001, 0.001, min_alpha, 0.0001),
upper = c(  Inf,   Inf, max_alpha, 0.9999),
method = "L-BFGS-B",
control = list(maxit=100000, fnscale=-1),
x=x)
res1
x <- rZIBP_Laksh(n=500, l1=l1, l2=l2, alpha=alpha, psi=psi)
# To obtain reasonable values for alpha
theta <- as.numeric(moments_estim_ZIBP_Laksh(x))
theta
# To create start parameters
min_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$min_alpha
max_alpha <- correct_alpha_BP_Laksh(l1=theta[1],
l2=theta[2])$max_alpha
start_param <- theta
names(start_param) <- c("l1_hat", "l2_hat", "alpha_hat", "psi_hat")
start_param
# Estimating parameters
res1 <- optim(fn = llZIBP_Laksh,
par = start_param,
lower = c(0.001, 0.001, min_alpha, 0.0001),
upper = c(  Inf,   Inf, max_alpha, 0.9999),
method = "L-BFGS-B",
control = list(maxit=100000, fnscale=-1),
x=x)
res1
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::install()
pkgdown::build_site()
devtools::load_all()
devtools::document()
pkgdown::build_site()
library(MultivDists)
# Example 1 ---------------------------------------------------------------
l1 <- 3
l2 <- 4
alpha <- -0.90
psi <- 0.2
data1 <- rZIBP_Laksh(n=100, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
data1 <- rZIBP_Laksh(n=10000, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
# To obtain E(Y1)=v1 and E(Y2)=v2
mod1$fitted.mu1[1]
mod1$fitted.mu2[1]
# To compare sample means with v1 and v2
colMeans(data1)
# To obtain alpha and psi
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
set.seed(1234)
data1 <- rZIBP_Laksh(n=100, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
# To explore the estimations of l1, l2, mu and p
# To obtain E(Y1)=v1 and E(Y2)=v2
mod1$fitted.mu1[1]
mod1$fitted.mu2[1]
# To compare sample means with v1 and v2
colMeans(data1)
# To obtain alpha and psi
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
set.seed(12345)
data1 <- rZIBP_Laksh(n=100, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
# To explore the estimations of l1, l2, mu and p
# To obtain E(Y1)=v1 and E(Y2)=v2
mod1$fitted.mu1[1]
mod1$fitted.mu2[1]
# To compare sample means with v1 and v2
colMeans(data1)
# To obtain alpha and psi
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
set.seed(123456)
data1 <- rZIBP_Laksh(n=100, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
# To explore the estimations of l1, l2, mu and p
# To obtain E(Y1)=v1 and E(Y2)=v2
mod1$fitted.mu1[1]
mod1$fitted.mu2[1]
# To compare sample means with v1 and v2
colMeans(data1)
# To obtain alpha and psi
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
set.seed(1234567)
data1 <- rZIBP_Laksh(n=100, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
# To explore the estimations of l1, l2, mu and p
# To obtain E(Y1)=v1 and E(Y2)=v2
mod1$fitted.mu1[1]
mod1$fitted.mu2[1]
# To compare sample means with v1 and v2
colMeans(data1)
# To obtain alpha and psi
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
set.seed(12345678)
data1 <- rZIBP_Laksh(n=100, l1=l1, l2=l2, alpha=alpha, psi=psi)
data1 <- as.data.frame(data1)
# To fit the model
mod1 <- NULL
mod1 <- marZIBP_Laksh(mu1.fo=X1~1,
mu2.fo=X2~1,
psi.fo=~1,
data=data1)
# To obtain the usual summary table
summary(mod1)
# To explore the estimations of l1, l2, mu and p
# To obtain E(Y1)=v1 and E(Y2)=v2
mod1$fitted.mu1[1]
mod1$fitted.mu2[1]
# To compare sample means with v1 and v2
colMeans(data1)
# To obtain alpha and psi
mod1$fitted.alpha
mod1$fitted.psi[1]
# To obtain l1 and l2
mod1$fitted.l1[1]
mod1$fitted.l2[1]
gen_data_ZIBP_Laksh <- function(n=100) {
# To generate the covariates
x1 <- runif(n=n)
x2 <- runif(n=n)
# To generate the means
mu1 <- exp(-2 + 3.5 * x1 + 2.7 * x2)
mu2 <- exp(-1 + 1.3 * x1 + 2.1 * x2)
# To generate the psi
logit_inv <- function(x) exp(x) / (1+exp(x))
psi  <- logit_inv(-2.4 + 1.2 * x2)
alpha <- -1
# To obtain lambdas
l1 <- mu1 / (1-psi)
l2 <- mu2 / (1-psi)
# To generate Y1 and Y2
y <- NULL
for (i in 1:n)
y <- rbind(y, rZIBP_Laksh(n=1, l1=l1[i], l2=l2[i],
alpha=alpha, psi=psi[i]))
# To create the dataset
dataset <- data.frame(y1=y[,1], y2=y[,2],
x1=x1, x2=x2,
mu1=mu1, mu2=mu2,
alpha=alpha, psi=psi,
l1=l1, l2=l2)
return(dataset)
}
set.seed(1234)
data2 <- gen_data_ZIBP_Laksh(n=100)
head(data2, n=8)
mod2 <- NULL
mod2 <- marZIBP_Laksh(mu1.fo=y1~x1+x2,
mu2.fo=y2~x1+x2,
psi.fo=~x2,
data=data2)
summary(mod2)
mod2$fitted.alpha
set.seed(12345)
data2 <- gen_data_ZIBP_Laksh(n=100)
head(data2, n=8)
mod2 <- NULL
mod2 <- marZIBP_Laksh(mu1.fo=y1~x1+x2,
mu2.fo=y2~x1+x2,
psi.fo=~x2,
data=data2)
summary(mod2)
mod2$fitted.alpha
set.seed(123456)
data2 <- gen_data_ZIBP_Laksh(n=100)
head(data2, n=8)
mod2 <- NULL
mod2 <- marZIBP_Laksh(mu1.fo=y1~x1+x2,
mu2.fo=y2~x1+x2,
psi.fo=~x2,
data=data2)
summary(mod2)
mod2$fitted.alpha
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::install()
pkgdown::build_site()
